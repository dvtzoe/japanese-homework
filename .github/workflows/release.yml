name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }} (${{ matrix.withBrowser && 'with-browser' || 'bare' }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        withBrowser: [false, true]
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            archive_ext: tar.gz
          - target: x86_64-apple-darwin
            runner: macos-13
            archive_ext: tar.gz
          - target: aarch64-apple-darwin
            runner: macos-14
            archive_ext: tar.gz
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            archive_ext: zip
    env:
      TARGET: ${{ matrix.target }}
      BUILD_VARIANT: ${{ matrix.withBrowser && 'with-browser' || 'bare' }}
      ARCHIVE_EXT: ${{ matrix.archive_ext }}
      ARCHIVE_NAME: ${{ format('jphw-{0}-{1}.{2}', matrix.target, matrix.withBrowser && 'with-browser' || 'bare', matrix.archive_ext) }}
      BINARY_NAME: ${{ format('jphw-{0}{1}', matrix.target, contains(matrix.target, 'windows') && '.exe' || '') }}
      PACKAGE_STAGING: ${{ format('package/jphw-{0}-{1}', matrix.target, matrix.withBrowser && 'with-browser' || 'bare') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: vx.x

      - name: Build CLI binary
        run: deno task build:cli
        env:
          JPHW_BUILD_TARGETS: ${{ matrix.target }}

      - name: Stage binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p "${PACKAGE_STAGING}"
          cp "dist/${BINARY_NAME}" "${PACKAGE_STAGING}/"
          chmod +x "${PACKAGE_STAGING}/${BINARY_NAME}"

      - name: Stage binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $staging = Join-Path $env:GITHUB_WORKSPACE $env:PACKAGE_STAGING
          New-Item -ItemType Directory -Path $staging -Force | Out-Null
          Copy-Item -Path (Join-Path 'dist' $env:BINARY_NAME) -Destination $staging -Force

      - name: Install bundled Chromium (Unix)
        if: matrix.withBrowser == true && runner.os != 'Windows'
        run: deno run -A npm:playwright@1.55.0 install chromium
        env:
          PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/${{ env.PACKAGE_STAGING }}/ms-playwright

      - name: Install bundled Chromium (Windows)
        if: matrix.withBrowser == true && runner.os == 'Windows'
        shell: pwsh
        run: |
          $browserPath = Join-Path (Join-Path $env:GITHUB_WORKSPACE $env:PACKAGE_STAGING) 'ms-playwright'
          $env:PLAYWRIGHT_BROWSERS_PATH = $browserPath
          deno run -A npm:playwright@1.55.0 install chromium

      - name: Package artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          tar -C "$(dirname "${PACKAGE_STAGING}")" -czf "release/${ARCHIVE_NAME}" "$(basename "${PACKAGE_STAGING}")"

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $releaseDir = Join-Path $env:GITHUB_WORKSPACE 'release'
          New-Item -ItemType Directory -Path $releaseDir -Force | Out-Null
          $stagingDir = Join-Path $env:GITHUB_WORKSPACE $env:PACKAGE_STAGING
          $archivePath = Join-Path $releaseDir $env:ARCHIVE_NAME
          if (Test-Path $archivePath) {
            Remove-Item $archivePath
          }
          Compress-Archive -Path (Join-Path $stagingDir '*') -DestinationPath $archivePath

      - name: Upload packaged archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: release/${{ env.ARCHIVE_NAME }}

  publish:
    name: Publish release assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_artifacts
          merge-multiple: true

      - name: Generate checksums
        working-directory: dist_artifacts
        run: |
          shopt -s nullglob
          files=( *.tar.gz *.zip )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No archives downloaded" >&2
            exit 1
          fi
          sha256sum "${files[@]}" > SHA256SUMS
          cat SHA256SUMS

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist_artifacts/*.tar.gz
            dist_artifacts/*.zip
            dist_artifacts/SHA256SUMS
